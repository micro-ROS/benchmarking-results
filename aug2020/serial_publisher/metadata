/* CTF 1.8 */
typealias integer { size = 8; align = 8; signed = true; } := int8_t;
typealias integer { size = 8; align = 8; signed = false; } := uint8_t;
typealias integer { size = 16; align = 8; signed = false; } := uint16_t;
typealias integer { size = 32; align = 8; signed = false; } := uint32_t;
typealias integer { size = 64; align = 8; signed = false; } := uint64_t;
typealias integer { size = 8; align = 8; signed = false; encoding = ASCII; } := ctf_bounded_string_t;
typealias enum : uint32_t {
	MUTEX_INIT = 33,
	MUTEX_UNLOCK = 34,
	MUTEX_LOCK = 35,
	SEMA_INIT = 36,
	SEMA_GIVE = 37,
	SEMA_TAKE = 38
} := call_id;

typealias enum : uint8_t {
	FUNCTION_ENTER = 0,
	FUNCTION_EXIT = 1,
} := function_exec;

typealias enum : uint8_t {
	COM_TX = 0,
	COM_RX = 1,
} := com_start_end_src_t;

clock {
    name = cycle_counter_sync;
    uuid = "62189bee-96dc-11e0-91a8-cfa3d89f3923";
    description = "Cycle counter synchronized across CPUs";
    freq = 1000000000;           /* frequency, in Hz */
    /* precision in seconds is: 1000 * (1/freq) */
    precision = 100;
    /*
     * clock value offset from Epoch is:
     * offset_s + (offset * (1/freq))
     */
    absolute = TRUE;
};

struct event_header {
	uint64_t timestamp;
	uint8_t id;
};

trace {
	major = 1;
	minor = 8;
	byte_order = le;
};

stream {
	event.header := struct event_header;
};

event {
	name = thread_switched_out;
	id = 0x10;
	fields := struct {
		uint32_t thread_id;
	};
};

event {
	name = thread_switched_in;
	id = 0x11;
	fields := struct {
		uint32_t thread_id;
	};
};

event {
	name = thread_priority_set;
	id = 0x12;
	fields := struct {
		uint32_t thread_id;
		int8_t prio;
	};

};

event {
	name = thread_create;
	id = 0x13;
	fields := struct {
		uint32_t thread_id;
 		ctf_bounded_string_t name[20]; 
	};
};

event {
	name = thread_abort;
	id = 0x14;
	fields := struct {
		uint32_t thread_id;
	};
};

event {
	name = thread_suspend;
	id = 0x15;
	fields := struct {
		uint32_t thread_id;
	};
};

event {
	name = thread_resume;
	id = 0x16;
	fields := struct {
		uint32_t thread_id;
	};
};

event {
        name = thread_ready;
        id = 0x17;
        fields := struct {
                uint32_t thread_id;
        };
};

event {
	name = thread_pending;
	id = 0x18;
	fields := struct {
		uint32_t thread_id;
	};
};

event {
	name = thread_info;
	id = 0x19;
	fields := struct {
		uint32_t thread_id;
		uint32_t stack_base;
		uint32_t stack_size;
	};
};

event {
	name = thread_name_set;
	id = 0x1a;
	fields := struct {
		uint32_t thread_id;
		ctf_bounded_string_t name[20];
	};
};

event {
	name = isr_enter;
	id = 0x20;
	fields := struct {
		uint32_t irq;
	};
};

event {
	name = isr_exit;
	id = 0x21;
	fields := struct {
		uint32_t irq;
	};
};

event {
	name = isr_exit_to_scheduler;
	id = 0x22;
};

event {
	name = idle;
	id = 0x30;
	fields := struct {
		uint8_t cpu_id;
	};
};

event {
	name = start_call;
	id = 0x41;
	fields := struct {
		call_id id;
	};
};

event {
	name = end_call;
	id = 0x42;
	fields := struct {
		call_id id;
	};
};

event {
	name = stack_usage;
	id = 0x50;
	fields := struct {
		uint32_t pid;
		integer { size = 32; align = 8; signed = 0; encoding = none; base = 16; } func_ptr;
		uint32_t usage_bytes;
	};
};

event {
	name = function_usage;
	id = 0x51;
	fields := struct {
		uint32_t pid;
		integer { size = 32; align = 8; signed = 0; encoding = none; base = 16; } func_ptr;
		function_exec fe;
	};
};

event {
	name = heap_alloc ;
	id = 0x60;
	fields := struct {
		uint32_t pid;
		integer { size = 32; align = 8; signed = 0; encoding = none; base = 16; } fn1;
		integer { size = 32; align = 8; signed = 0; encoding = none; base = 16; } fn2;
		integer { size = 32; align = 8; signed = 0; encoding = none; base = 16; } fn3;
		integer { size = 32; align = 8; signed = 0; encoding = none; base = 16; } fn4;
		integer { size = 32; align = 8; signed = 0; encoding = none; base = 16; } address;
		uint32_t real_alloc;
		uint32_t user_alloc;
		uint32_t user_req;
	};
};

event {
	name = heap_free ;
	id = 0x61;
	fields := struct {
		uint32_t pid;
		integer { size = 32; align = 8; signed = 0; encoding = none; base = 16; } address;
		uint32_t real_alloc;
		uint32_t user_alloc;
	};
};

event {
	name = com_start;
	id = 0x70;
	fields := struct {
		ctf_bounded_string_t interface[20];
		com_start_end_src_t recvorsend;
	};
};

event {
	name = com_finish ;
	id = 0x71;
	fields := struct {
		ctf_bounded_string_t interface[20];
		uint32_t pkt_size;
		com_start_end_src_t recvorsend;
	};
};

event {
	name = com_recv_pkt;
	id = 0x72;
	fields := struct {
		ctf_bounded_string_t interface[8];
		uint8_t packet[64];
		uint32_t size;
	};
};

event {
	name = com_send_pkt;
	id = 0x73;
	fields := struct {
		ctf_bounded_string_t interface[8];
		uint8_t packet[64];
		uint32_t size;
	};
};

event {
	name = ctf_timer_start ;
	id = 0xA0;
	fields := struct {
		uint32_t id;
		ctf_bounded_string_t interface[20];
		uint32_t line;
		integer { size = 32; align = 8; signed = 0; encoding = none; base = 16; } address;
	};
};

event {
	name = ctf_timer_stop ;
	id = 0xA1;
	fields := struct {
		uint32_t id;
		ctf_bounded_string_t interface[20];
		uint32_t line;
		integer { size = 32; align = 8; signed = 0; encoding = none; base = 16; } address;
	};
};

event {
	name = manual_timer_stop ;
	id = 0xA2;
	fields := struct {
		uint32_t id;
		uint32_t tstart_ns;
		uint32_t tstart_s;
	};
};

event {
	name = manual_timer_start ;
	id = 0xA3;
	fields := struct {
		uint32_t id;
		uint32_t tstart_ns;
		uint32_t tstart_s;
	};
};

event {
	name = measurement_start;
	id = 0xC0;
};

event {
	name = measurement_stop;
	id = 0xC1;
};

event {
	name = dump_start;
	id = 0xF0;
};

event {
	name = dump_stop;
	id = 0xF1;
};
